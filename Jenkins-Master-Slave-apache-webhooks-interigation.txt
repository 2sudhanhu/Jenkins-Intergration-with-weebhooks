How to configure Master and Slave Nodes on Jenkins in AWS environment and triggering jenkins job with github integration.

* Launch 2 instances one for master and other for slave 

* First instance launching for Master Node add the below script in to pre install few tools.  

Jenkins Master node script

#!/bin/bash
sudo yum install wget -y
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key   
sudo yum install jenkins java-1.8.0-openjdk-devel -y    #126MB Install  64 Packages  
sudo systemctl daemon-reload
sudo systemctl start jenkins
sudo systemctl status jenkins
sudo yum install git -y
sudo yum upgrade -y

hit MasterIP:8080 
copy the path of the stored adminstrator password
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
3efca61c38c84e73aa6a6a12b1c4c191
Install suggested Plugins
Create First Admin User
Username:	Sudhanshu
Password:	••••••
Confirm password:	••••••
Full name:	SUDHANSHU TRIPATHI
E-mail address:	sudhanshutripathi541998@gmail.com



* Second instance launching for Slave Node add the below script in to pre install few tools.

Jenkins slave node script

#!/bin/bash
/sudo yum install jenkins java-1.8.0-openjdk-devel -y
sudo yum install git -y
sudo yum upgrade
sudo yum install httpd -y
sudo chkconfig httpd on
sudo service httpd start


* Setup jenkins slave node
* SSH into Slave Node Instacne using public ip by using the command to make it work you need to SSH from the folder where your key is present
$ ssh -i file.pem username@ip-address

* Then run the below commands to setup a new user   
$ useradd jenkins-slave-01
$ passwd ********
$ sudo su - jenkins-slave-01
$ ssh-keygen -t rsa -N "" -f /home/jenkins-slave-01/.ssh/id_rsa
$ cd .ssh
$ cat id_rsa.pub > authorized_keys
$ chmod 700 authorized_keys


* Next we have to add Add new user into sudoers file for that use below command it opens a file add the below content into the file by pressing 'i' then add the content then save the file by pressing button 'esc' then ':' then 'wq' (Have to do like this press esc-> :wq -> Enter)
$ sudo visudo
jenkins-slave-01 ALL=(ALL) NOPASSWD: ALL
(ex: user name ALL=(ALL) NOPASS: ALL ) 

* Configuration on master instance 
* SSH into Master Node Instacne using public ip by using the command to make it work you need to SSH from the folder where your key is present
$ ssh -i file.pem username@ip-address

* Once your into instance check the services you gave in script are installed or not by using 
$ servicename --version

* Then Run the below commands as root

$ mkdir -p /var/lib/jenkins/.ssh      #With the help of mkdir -p command you can create sub-directories of a directory. It will create parent directory first, if it doesn't exist. But if it already exists, then it will not print an error message and will move further to create sub-directories.
$ cd /var/lib/jenkins/.ssh
$ ssh-keyscan -H SLAVENODEPRIVATEIP >>/var/lib/jenkins/.ssh/known_hosts   #
$ chown jenkins:jenkins /var/lib/jenkins/.ssh/known_hosts
$ chmod 700 /var/lib/jenkins/.ssh/known_hosts
$ ls -l

* Configuring the Slave Node From Jenkins site
* Enter the public ip of your Master instance fallowed by 8080 port number into the web browser(8080 is the default port for jenkins you have to open this in the security groups of the instances we launched)
Ex: 123.123.123.123:8080 (Paste in the browser you will see jenkins portal. Do some confugurations by giving the required deatils)

* Then Goto jenkins Dash Board
 -> Manage Jenkins
 -> Manage Nodes and Clouds
 -> NewNode Add it as Permanent Agent
 -> Add Description
 -> Add No of executers
 -> Remote root directory [/home/jenkins-slave-01]
 -> Add a Label Ex: java
 -> Usage As much as possible
 -> In launch method: select Launch agent via SSH
 -> In Host section :  we have to provide the private IP of the slave
 -> Add Credentials
 -> In kind dropdown we have to select "SSH username with private key"
 -> USER: we have to add the user created in slave node instance "jenkins-slave-01"
 -> PrivateKey
 -> Enter Directly 
 -> Paste the id_rsa key in the box
 -> You can get the key from below commands

$ sudo su - jenkins-slave-01
$ pwd
/home/jenkins-slave-01
$ cd .ssh
$ more id_rsa

 -> after pasting the private key click add button 

* We are using the Webhooks to integrate jenkins with github to trigger the automatically
* Log into your github account
 -> Goto your project repository
 -> Look for settings on top right after insights then click settings
 -> Goto webhooks
 -> Add webhook
    Example: http://PUBLICMASTERIP:8080/github-webhook/
 -> content/type select
    Application/json

 -> Secret
    ***********
 -> Get secret code from jenkins dashboard
 -> Profile
 -> configure
 -> API token generate
 -> copy that and past in weebhooks

* Comeback to jenkins portal and create a new job
 -> New item then give a name of the job
 -> select pipeline then ok
 -> In Build Triggers
 -> Select GitHub hook trigger for GITScm polling
 -> Then you have to write your own groovy script as per your needs
 [ Example Jenkins Pipeline Script

pipeline {
    agent {
        label 'java'
        
    }

    stages {
        stage('gitcheckout') {
            steps {
                git branch: 'main', url: 'https://github.com/2sudhanhu/Jenkins-Intergration-with-weebhooks.git'
            }
        }
        stage('pull'){
            steps {
                sh 'cd /var/www/html/testing && sudo git pull origin main'
            }
        }
    }
}

OR


pipeline {
    agent {
        label 'java'
        
    }

    stages {
        stage('gitcheckout') {
            steps {
                git branch: 'main', url: 'https://github.com/2sudhanhu/Jenkins-Intergration-with-weebhooks.git'
            }
        }
        stage('pull'){
            steps {
                sh 'sudo cp -r /home/jenkins-slave-01/workspace/sudhanshu/* /var/www/html/'
            }
        }
    }
}
]

 -> After writing the code apply and save

* To check we done every configuration correct we have to push some code to github from local machine.
* Use gitbash or any other tool got your project folder [here we are using testing folder]
 -> Create a new file name it (ex: file.txt) write some code then run below commands in gitbash
 -> $ git add file.txt
 -> $ git commit -m "write your message"
 -> $ push origin -u branchname

* Goto jenkins Dashboard check it wheather the build is triggered or not.

* Then in the browser Enter the ip of slave instance You will see the message you have given in the file.txt 

* With this configuration of Jenkins Master and Slave Nodes on AWS environment and triggering jenkins job with github integration is complete. 



*********************************END OF FILE***************************************************************************************************************************


**********
References 
**********

https://bhargavamin.com/how-to-do/setup-jenkins-slave-amazon-linux-aws/
https://www.youtube.com/watch?v=hwrYURP4O2k

https://medium.com/@mightywomble/jenkins-pipeline-beginners-guide-f3868f715ed9

https://medium.com/edureka/jenkins-pipeline-tutorial-continuous-delivery-75a86936bc92#:~:text=Creating%20your%20first%20Jenkins%20pipeline.,pipeline%20or%20a%20scripted%20one

https://www.codurance.com/publications/2019/05/21/creating-a-jenkinsfile-pipeline

***********************************************************************************************************************************************************************

To install maven Commands and script
#!/bin/bash
sudo wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
sudo sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
sudo yum install -y apache-maven
mvn –v
